Question 1:

#include <iostream>

struct A
{
    int data[4];

    A(int x, int y, int z, int t) : data{x, y, z, t} {}

    virtual void x() { return data[0]; }
    virtual void y() { return data[1]; }

};

int main(int argc, char **argv)
{
    A a(11, 22, 33, 44);

    int *arr = (int *)&a;
    std::cout << arr[2] << std::endl;

    return 0;
}

Output = ?
Error: Return value of 2 functions is void but function define return int 
virtual void x() { return data[0]; }
virtual void y() { return data[1]; }

#################################################################
Question 2:

unsigned char half_limit = 150;

for (unsigned char i = 0; i < 2 * half_limit; ++i)
{
    // do something;
}

What is wrong?
No problem about syntax


#################################################################
Question 3: What are differences between linear & binary searches?
- Binary search requires the input data to be sorted; linear search doesn't
- Binary search requires an ordering comparison; linear search only requires equality comparisons
- Binary search has complexity O(log n); linear search has complexity O(n) as discussed earlier
- Binary search requires random access to the data; linear search only requires sequential access 
- Binary search is efficient for the larger array. If the amount of data is small, then linear search is preferable because this searching process is fast when data is small.


#################################################################
Question 4:
Given a circular linked list, implement an algorithm which returns node at the beginning of the loop 

EXAMPLE
Input: A -> B -> C -> D -> E -> C [the same C as earlier] 
Output: C

















#################################################################

Question 5:
size_t sz = buf->size();
while ( --sz >= 0 )
{
	/* do something */
}

Assume that buf is an allocated (valid) pointer. What is wrong?










#################################################################

Question 6:
You are given two 32-bit numbers, N and M ( N > M ), and two bit positions, i and j.
Please write a method to set all bits between i and j in N equal to M
(M becomes a substring of N located at i and starting at j)

EXAMPLE: Input: N = 10000000000, M = 10101, i = 2, j = 6 Output: N = 10001010100






#################################################################
Question 7: Which kind of the sort methods is used in std::sort?
Can you give explain how it works?











#################################################################
Question 8:
Imagine a simple database storing information for students’ grades.
Design what this database might look like, and provide a SQL query to return a list of the honor roll students (top 10%), sorted by their grade point average 
 




























#################################################################
Question 9:
What is a deadlock? Design a class providing a lock which ensures there are no possible deadlock.



















#################################################################
Question 10:
Write a function to swap 2 integers without using temporary variables.




















#################################################################
Question 10:
Given an image represented by an NxN matrix, where each pixel in the image is 4 bytes.
Write a method to rotate the image by 90 degrees.


















#################################################################
Question 11:
Fill operators and parenthesis to complete this expression:

(3 + 1) : (3 : 6) = 8


#################################################################
Question 12:
Given an input file with four billion integers,
provide an algorithm to generate an integer which is not contained in the file. 
Assume you have 10 MB memory.























#################################################################
Question 13:
Compare and contrast a hash table vs  an STL map.  How is a hash table implemented?











#################################################################
Question 14:
How do virtual functions work in C++?











#################################################################
Question 15:
Write a small smart pointer.
















#################################################################
Question 16:

#include <iostream>
#include <functional>
#include <numeric>

using namespace std;

int myop (int x, int y)
{
  return x + y;
}

int main ()
{
  int val[] = {1, 2, 3, 5};
  int result[7];

  adjacent_difference (val, val + 7, result);

  for (int i = 0; i < 4; i++)
    cout << result[i] <<' ';

  return 0;
}

Output = 1 1 1 2



#################################################################
Question 17:
Write a method to print the last n lines of an input file using C++.
#define SIZE 100
void tail(FILE* in, int n)
{
	int count = 0;  // To count '\n' characters 

	// unsigned long long pos (stores upto 2^64 – 1 
	// chars) assuming that long long int takes 8  
	// bytes 
	unsigned long long pos;
	char str[2 * SIZE];

	// Go to End of file 
	if (fseek(in, 0, SEEK_END))
		perror("fseek() failed");
	else
	{
		// pos will contain no. of chars in 
		// input file. 
		pos = ftell(in);

		// search for '\n' characters 
		while (pos)
		{
			// Move 'pos' away from end of file. 
			if (!fseek(in, --pos, SEEK_SET))
			{
				if (fgetc(in) == '\n')

					// stop reading when n newlines 
					// is found 
				if (count++ == n)
					break;
			}
			else
				perror("fseek() failed");
		}

		// print last n lines 
		printf("Printing last %d lines -\n", n);
		while (fgets(str, sizeof(str), in))
			printf("%s", str);
	}
	printf("\n\n");
}

#################################################################
Question 18:
Implement an algorithm to find the nth to last element of a singly linked list.
struct Node
{
	int data;
	struct Node* next;
};

void printNthToLast(struct Node* head, int n)
{
	int len = 0, i;
	struct Node *temp = head;
	while (temp != NULL)
	{
		temp = temp->next;
		len++;
	}
	if (len < n)
		return;
	temp = head;
	for (i = 1; i < len - n + 1; i++)
	{
		temp = temp->next;
	}
	while (temp)
	{
		cout << temp->data;
		temp = temp->next;
	}
	return;
}

#################################################################
Question 19:

// A C++ program to demonstrate STL sort() using
// our own comparator
#include<bits/stdc++.h>
using namespace std;
 
// An interval has start time and end time
struct Interval
{
    int start, end;
};
 
// Compares two intervals according to staring times.
bool compareInterval(Interval i1, Interval i2)
{
    return (i1.start < i2.start);
}
 
int main()
{
    Interval arr[] =  { {6,8}, {1,9}, {2,4}, {4,7} };
    int n = sizeof(arr)/sizeof(arr[0]);
 
    // sort the intervals in increasing order of
    // start time
    sort(arr, arr+n, compareInterval);
 
    cout << "Intervals sorted by start time : \n";
    for (int i=0; i<n; i++)
       cout << "[" << arr[i].start << "," << arr[i].end
            << "] ";
 
    return 0;
}

Output = [1,9] [2,4] [4,7] [6,8]

#################################################################
Question 20:
If a fault (Production Issue) was reported where some wrong figures were being generated
and, you had no access to the production system but you knew which module was at fault– how would you investigate it ?